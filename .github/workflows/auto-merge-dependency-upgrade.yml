name: Dependencies auto upgrade and merge

on:
  workflow_dispatch:
  pull_request_target:

jobs:
  test:
    runs-on: ubuntu-latest
    # refer to
    # https://hugo.alliau.me/2021/05/04/migration-to-github-native-dependabot-solutions-for-auto-merge-and-action-secrets/#share-your-secrets-with-dependabot
    # If the PR is coming from a fork (pull_request_target), ensure it's opened by "dependabot[bot]".
    # Otherwise, clone it normally.
    if: |
        (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') ||
        (github.event_name == 'pull_request_target' && github.actor == 'pre-commit-ci[bot]')

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: clingo
          POSTGRES_USER: clingo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Test with pytest
        env:
          DJANGO_SETTINGS_MODULE: clingo.settings
          # use locahost and ports in postgres service to avoid below failure
          # could not translate host name "postgres" to address: Temporary failure in name resolution
          DATABASE_URL: "postgres://clingo:clingo@localhost:5432/clingo"
        run: |
          source $VENV
          pytest --cov=. --cov-report=json

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.json
          flags: overall
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true

      - uses: actions/upload-artifact@v4.4.1
        with:
          name: pytest-results
          path: ./coverage.json
        if: ${{ always() }}

  dependabot_auto_merge:
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.MY_PAT }}"
      - name: auto-merge for Dependabot PRs
        # TODO enable some check here
        # if: steps.metadata.outputs.dependency-type == 'direct:production'
        uses: fastify/github-action-merge-dependabot@v3
        with:
          github-token: ${{secrets.MY_PAT}}
          merge-method: rebase

  pre_commit_auto_merge:
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ github.actor == 'pre-commit-ci[bot]' }}
    steps:
      - name: Auto-merge
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.MY_PAT}}
          script: |
            const { pull_request } = context.payload;
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_request.number,
              event: 'APPROVE',
              body: '',
            });
            try {
              const mergeRes = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pull_request.number,
                merge_method: 'rebase', // 'squash' or 'merge' or 'rebase'
              });
              if (mergeRes.data.merged) {
                console.log(`Pull request #${pull_request.number} merged successfully.`);
                const branch = pull_request.head.ref;
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branch}`,
                });
                console.log(`Branch '${branch}' deleted successfully.`);
              }
            } catch (error) {
              console.error('Error during auto-merge or branch deletion: ',  error);
            }
