# generated by GPT-4
name: Pre-commit Auto-update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight

jobs:
  update-pre-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          ref: main  # Your default branch

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit autoupdate
        run: pre-commit autoupdate

      - name: Check if there are changes
        id: changes
        run: |
          if git diff --exit-code; then
            echo "No changes to commit."
            echo "::set-output name=changes_exist::false"
          else
            echo "Changes to commit."
            echo "::set-output name=changes_exist::true"
          fi

      - name: Commit and push if changes exist
        if: steps.changes.outputs.changes_exist == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b pre-commit-autoupdate
          git add .pre-commit-config.yaml
          git commit -m "Update pre-commit hooks"
          git push origin pre-commit-autoupdate

      - name: Create Pull Request
        if: steps.changes.outputs.changes_exist == 'true'
        uses: peter-evans/create-pull-request@v3
        with:
          branch: pre-commit-autoupdate
          delete-branch: true
          title: "Update pre-commit hooks"
          body: "Automated changes by `pre-commit autoupdate` action."

      - name: Auto merge PR
        if: steps.changes.outputs.changes_exist == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request.number;
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              commit_title: `Merge pull request #${pull_number} from pre-commit-autoupdate`,
              merge_method: 'squash'  # Can be 'merge', 'squash', or 'rebase'
            });
